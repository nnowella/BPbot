import telebot
from telebot import types

token = "6927857136:AAFsHm4A-o1zLrKqL2QteMiBvaR0ET-jTnI"

bot = telebot.TeleBot(token=token)

@bot.message_handler(commands=['start'])
def start(message):
    user = message.chat.id
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Çüîç", callback_data='con'))
    bot.send_message(user, f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}</b>\n \n–≠—Ç–æ—Ç –±–æ—Ç –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –≤–∞–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º —É—á–∏—Ç–µ–ª–µ–π <u>–®–∫–æ–ª—ã ‚Ññ1561</u>üöÄ\n \n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <u>–∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É</u>‚¨áÔ∏è", parse_mode='html', reply_markup = markup)

@bot.callback_query_handler(func=lambda callback: True)
def callback_con(callback):
    if callback.data == 'con':
        contact(callback.message)

@bot.message_handler(commands=['contact'])
def contact(message):
    user = message.chat.id
    markup = types.ReplyKeyboardMarkup()
    button11 = types.KeyboardButton("11-—ã–π")
    markup.row(button11)
    bot.send_message(user, "<b>–ù–∞—á–Ω—ë–º</b>\n \n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —É—á–∏—Ç–µ—Å—åüè´", parse_mode='html', reply_markup = markup)
    bot.register_next_step_handler(user, corpus)
def corpus(message):
    user = message.chat.id
    if message.text() == "11-—ã–π":
        markup = types.ReplyKeyboardMarkup()
        buttonfio = types.KeyboardButton("–ü–æ –§–ò–û")
        buttonsub = types.KeyboardButton("–ü–æ –ü—Ä–µ–¥–º–µ—Ç—Éüìö")
        markup.row(buttonfio)
        markup.row(buttonsub)
        bot.send_message(user, "<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:</b>", parse_mode='html', reply_markup = markup)
        bot.register_next_step_handler(user, search)
    def search(message):
        user = message.chat.id
        if message.text() == "–ü–æ –ü—Ä–µ–¥–º–µ—Ç—Éüìö":
            markup = types.InlineKeyboardMarkup()
            b_rus_lit = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", callback_data='ruslit')
            b_mat = types.InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",callback_data='mat')
            markup.row(b_rus_lit, b_mat)
            b_inf = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", callback_data='inf')
            b_fiz = types.InlineKeyboardButton("–§–∏–∑–∏–∫–∞", callback_data='fiz')
            markup.row(b_inf, b_fiz)
            b_in_yaz = types.InlineKeyboardButton("–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", callback_data='lang')
            b_bio_him = types.InlineKeyboardButton("–ë–∏–æ–ª–æ–≥–∏—è –∏ –•–∏–º–∏—è", callback_data='biohim')
            markup.row(b_in_yaz, b_bio_him)
            b_obz_ist = types.InlineKeyboardButton("–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ –∏ –ò—Å—Ç–æ—Ä–∏—è", callback_data='hist')
            b_geo_obj = types.InlineKeyboardButton("–ì–µ–æ–≥—Ä–∞—Ñ–∏—è –∏ –û–ë–ñ", callback_data='geob')
            markup.row(b_obz_ist, b_geo_obj)
            b_cancel = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data='cancel')
            markup.row(b_cancel)
            bot.send_message(user, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:</b>", parse_mode='html', reply_markup = markup)

@bot.callback_query_handler(func=lambda callback: True)
def callback_sub(callback):
    user = callback.message.chat.id
    if callback.data == 'ruslit':
        markup = types.InlineKeyboardMarkup()
        rlt1 = types.InlineKeyboardButton("–°—É—Ä–∞–¥–µ–µ–≤–∞ –ò.–ì.", callback_data='rl1')
        markup.row(rlt1)
        bot.send_message(user, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>", parse_mode='html', reply_markup = markup)
    elif callback.data == 'mat':
        markup = types.InlineKeyboardMarkup()
        mt1 = types.InlineKeyboardButton("–Æ—Ä–∫–µ–≤–∏—á –î.–ï.", callback_data='mat1')
        mt2 = types.InlineKeyboardButton("–°–ª—É—Ü–∫–∏–π –õ.–ë.", callback_data='mat2')
        markup.row(mt1, mt2)
        bot.send_message(user, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>", parse_mode='html', reply_markup = markup)
    elif callback.data == 'inf':
        markup = types.InlineKeyboardMarkup()
        it1 = types.InlineKeyboardButton("–ö–æ–Ω–æ–≤–∞–ª–æ–≤–∞ –¢.–ê.", callback_data='inf1')
        it2 = types.InlineKeyboardButton("–ó–≤—è–≥–∏–Ω—Ü–µ–≤ –î.–ê.", callback_data='inf2')
        markup.row(it1, it2)
        bot.send_message(user, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>", parse_mode='html', reply_markup = markup)
    elif callback.data == 'fiz':
        markup = types.InlineKeyboardMarkup()
        ft1 = types.InlineKeyboardButton("–ì–æ—Ä–±—É–Ω–æ–≤–∞ –ù.–°.", callback_data='fiz1')
        ft2 = types.InlineKeyboardButton("–ü–µ—Ä–µ–ø–µ–ª–∏—Ü—ã–Ω –°.–ê.", callback_data='fiz2')
        markup.row(ft1, ft2)
        bot.send_message(user, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>", parse_mode='html', reply_markup = markup)
    elif callback.data == 'lang':
        markup = types.InlineKeyboardMarkup()
        lt1 = types.InlineKeyboardButton("–ú–æ—Ä–≥—É–Ω–µ–Ω–∫–æ –ï.–Æ.", callback_data='lan1')
        lt2 = types.InlineKeyboardButton("–ö–∞—Ä–ø–æ–≤–∞ –ê.–°.", callback_data='lan2')
        markup.row(lt1, lt2)
        bot.send_message(user, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>", parse_mode='html', reply_markup = markup)
    elif callback.data == 'biohim':
        markup = types.InlineKeyboardMarkup()
        bht1 = types.InlineKeyboardButton("–ö–∏—Ä—Å–∞–Ω–æ–≤–∞ –ù.–ê.", callback_data='bio1')
        markup.row(bht1)
        bot.send_message(user, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>", parse_mode='html', reply_markup = markup)
    elif callback.data == 'hist':
        markup = types.InlineKeyboardMarkup()
        oht1 = types.InlineKeyboardButton("–ë–∞–∂–µ–Ω–æ–≤ –û.–ê.", callback_data='his1')
        markup.row(oht1)
        bot.send_message(user, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>", parse_mode='html', reply_markup = markup)
    elif callback.data == 'geob':
        markup = types.InlineKeyboardMarkup()
        gt1 = types.InlineKeyboardButton("–°—Ç—Ä–∏–∂–∞–∫–æ–≤–∞ –í.–õ.", callback_data='geo1')
        ot1 = types.InlineKeyboardButton("–¢–µ—Ä—è–µ–≤ –ê.–ò.", callback_data='obj1')
        markup.row(rlt1)
        bot.send_message(user, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:</b>", parse_mode='html', reply_markup = markup)
    elif callback.data == 'cancel':
        corpus(callback.message)

bot.polling(none_stop=True)

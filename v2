import math
from itertools import combinations

def read_points(filename):
    points = []
    with open(filename, 'r') as file:
        for line in file:
            x, y = map(float, line.strip().split())
            points.append((x, y))
    return points

def euclidean_distance(a, b):
    return math.sqrt((a[0] - b[0])**2 + (a[1] - b[1])**2)

def dbscan(points, eps, min_samples):
    clusters = []
    visited = set()
    noise = set()

    for i, point in enumerate(points):
        if i in visited:
            continue
        visited.add(i)
        neighbors = find_neighbors(points, i, eps)
        if len(neighbors) < min_samples:
            noise.add(i)
        else:
            cluster = []
            expand_cluster(points, i, neighbors, cluster, visited, eps, min_samples)
            clusters.append(cluster)
    
    # Преобразуем индексы в координаты
    clustered_points = []
    for cluster in clusters:
        clustered_points.append([points[i] for i in cluster])
    return clustered_points

def find_neighbors(points, idx, eps):
    neighbors = []
    for i, point in enumerate(points):
        if euclidean_distance(points[idx], point) <= eps:
            neighbors.append(i)
    return neighbors

def expand_cluster(points, idx, neighbors, cluster, visited, eps, min_samples):
    cluster.append(idx)
    i = 0
    while i < len(neighbors):
        current = neighbors[i]
        if current not in visited:
            visited.add(current)
            current_neighbors = find_neighbors(points, current, eps)
            if len(current_neighbors) >= min_samples:
                neighbors += [n for n in current_neighbors if n not in neighbors]
        if current not in cluster:
            cluster.append(current)
        i += 1

def filter_anomalies(clusters, points):
    valid_clusters = []
    anomalies = []
    
    for cluster in clusters:
        if len(cluster) > 10:
            valid_clusters.append(cluster)
            continue
        
        is_anomaly = True
        for other_cluster in clusters:
            if other_cluster == cluster:
                continue
            for point_idx in cluster:
                for other_point_idx in other_cluster:
                    if euclidean_distance(points[point_idx], points[other_point_idx]) <= 1.0:
                        is_anomaly = False
                        break
                if not is_anomaly:
                    break
            if not is_anomaly:
                break
        
        if is_anomaly:
            anomalies.extend(cluster)
        else:
            valid_clusters.append(cluster)
    
    # Возвращаем кластеры в виде списка точек
    valid_clusters_points = []
    for cluster in valid_clusters:
        valid_clusters_points.append([points[i] for i in cluster])
    
    return valid_clusters_points

def compute_min_max_distances(clusters):
    min_dist = float('inf')
    max_dist = 0.0
    
    for i in range(len(clusters)):
        for j in range(i + 1, len(clusters)):
            for p1 in clusters[i]:
                for p2 in clusters[j]:
                    dist = euclidean_distance(p1, p2)
                    if dist < min_dist:
                        min_dist = dist
                    if dist > max_dist:
                        max_dist = dist
    
    return min_dist, max_dist

def process_file(filename):
    points = read_points(filename)
    clusters_indices = dbscan(points, eps=1.0, min_samples=1)
    clusters_points = filter_anomalies(clusters_indices, points)
    min_dist, max_dist = compute_min_max_distances(clusters_points)
    return min_dist, max_dist

# Обработка файлов
min_a, max_a = process_file('A.txt')
min_b, max_b = process_file('Б.txt')

# Вывод результатов
print(int(min_a * 10000), int(max_a * 10000))
print(int(min_b * 10000), int(max_b * 10000))
